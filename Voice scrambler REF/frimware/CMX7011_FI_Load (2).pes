;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;   +   FI Load.pes : CMX 7011 FI load script for PE0002
;   +
;   +   Application support             CML Microcircuits (UK) Ltd
;   +
;   +   31st of October 2013                xxix.x.mmxiii
;   +
;   +   Revision A                      Issue 1
;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;   **************************************************************************
;  **************************************************************************
; *
; *     Script preamble - define constants, variables and register widths
; *
;  **************************************************************************
;   **************************************************************************

; CBUS 1
;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;   +   0 bit CBUS write register names
;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
SP_RESET        const   $01             ; CBUS General reset
;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;   +   8 bit CBUS write register names and bit names
;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
SP_VCFG         const   $07             ; Vocoder configuration
SP_SVCREQ       const   $0e             ; Service request
SVCREQ_DLOAD    const   $01
SP_DECFRAME     const   $10             ; Decode frames 
;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;   +   16 bit CBUS write register names and bit names
;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
SP_VCTRL            const   $11         ; Vocoder control
SP_IRQENAB          const   $1f         ; IRQ enable
;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;   +   8 bit CBUS read registers
;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
SP_MVCFG            const   $2c         ; Mirror of configuration
SP_SVCACK           const   $2e         ; Service acknowledgement
SVCACK_OK           const   $01    
;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;   +   16 bit CBUS read registers
;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
SP_MVCTRL           const   $3c         ; Mirror of control
SP_PLEVEL           const   $31         ; Mirror of control
SP_STATUS           const   $40         ; Status
VS_SVC              const   $4000
VS_RDY              const   $8000



;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++
;   +   Other handy values
;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++
PRSIZE      const   128                 ; Image record size

;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++
;   +   Script variables
;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++
gStatus     word    0                   ; Global status register shadow
gStatus2    word    0                   ; Global status register shadow
temp        word    0                   ; Temporary variable
FileSize    word    0
cdat        buffer	128
deviceno    word    1
;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;   +   Register non-16 bit CBUS registers to correct data width
;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    register    #1,SP_RESET,#0
    register    #1,SP_SVCREQ,#1
    register    #1,SP_VCFG,#1
    register    #1,SP_MVCFG,#1
    register    #1,SP_SVCACK,#1
    register    #1,SVCACK_OK,#1
    register    #1,SVCREQ_DLOAD,#1
    register    #1,SP_DECFRAME,#1
	
;  **************************************************************************
;  **************************************************************************
; *
; *     Main script sequence.
; *
;  **************************************************************************
;  **************************************************************************


;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;   +   Check device is attached to the CBUS, establish an
;   +       interrupt handler, and then turn on interrupts.
;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    ;
    device      1
    copy        #0,*SP_RESET
    delay       #10

    disp        "Script starting, checking device is present"
    jsr         CheckForDevice
    disp        "Device1 seems to be present"   
    Device      1
    setvect     1,HandleIrqn1           ; Define interrupt handler 1
    copy        *$40,temp               ; Clear any pending interrupt
    copy        #0,gStatus              ; Clear global status shadow
    intson                              ; Enable interrupts
;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;   +   Send function image.
;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    fopenr      "fi7011_1010.ped","%02x",FileSize
    intsoff
    copy        1,deviceno
    Device      1
    intson
    copy        #0,*SP_RESET
    delay       #10
  
    jsr         VsrSendImage 
  
      
    disp        "Finish"    
    
;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;   +   Clean up and stop script
;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   intsoff
    stop
    


;  **************************************************************************
;  **************************************************************************
; *
; *     Support subroutines
; *
;  **************************************************************************
;   **************************************************************************

;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;   +   Send a function image to the device
;   +
;   +   Requires:
;   +       Image file to be opened with fopenr with "%02x" format
;   +       File item count to be placed in the variable 'FileSize'
;   +
;   +   Example:
;   +       fopenr  "func_image.ped","%02x",FileSize
;   +       jsr     VsrSendImage
;   +
;   +   Results:
;   +       Subroutine stops script on error
;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
VsiTemp     word    0
VsiCount    word    0
VsiBuffer   buffer  128
VsrSendImage
    copy        #0,gStatus
    copy        #0,*SP_RESET
    jsr         WaitRDY
    disp        "Device reset"
    copy        VS_RDY,VsiTemp
    or          VS_SVC,VsiTemp
    copy        VsiTemp,*SP_IRQENAB
    copy        SVCREQ_DLOAD,*SP_SVCREQ
    jsr         WaitSVC
    copy        *SP_SVCACK,VsiTemp
    and         SVCACK_OK,VsiTemp
    jmpc        VsiTemp == SVCACK_OK,VsiSendData
    disp        "Device has rejected download request"
    stop
VsiSendData
    jmpc        FileSize < PRSIZE,VsiEndData
    copy        0,VsiCount
    while   VsiCount < PRSIZE
        filer   VsiBuffer[VsiCount++]
    endwhile
    write       VsiBuffer[0],*SP_DECFRAME,PRSIZE
    jsr         WaitSVC
    copy        *SP_SVCACK,VsiTemp
    and         SVCACK_OK,VsiTemp
    jmpc        VsiTemp == SVCACK_OK,VsiSendData
    disp        "Device rejected data packet"
    stop
VsiEndData
    copy        SVCREQ_DLOAD,*SP_SVCREQ 
    jsr          WaitRDY 
    copy        *SP_SVCACK,VsiTemp
    and         SVCACK_OK,VsiTemp
    jmpc        VsiTemp == SVCACK_OK,VsiEndImage
    disp        "Device rejected function image"
    stop
VsiEndImage
    disp        "Function image loaded  Device 1"
    copy    	*SP_PLEVEL, temp
   disp        "PLEVEL register read: $%x", temp
    return


;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;   +   Check that the device is present and CBUS works OK
;   +
;   +   Requires:
;   +       Nothing
;   + 
;   +   Example:
;   +       jsr     CheckForDevice
;   +
;   +   Results:
;   +       Subroutine displays message and reports if device is not found
;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

CfdTemp     word    0
CheckForDevice
    Device      1
    copy        #$55,*SP_VCFG
    delay       #10
    copy        *SP_MVCFG,CfdTemp
    jmpc        CfdTemp == #$55,CfdPart2
    disp        "Device does not seem to be there (8bit write/read $55)"
    stop
CfdPart2
    copy        #$aa,*SP_VCFG
    delay       #10
    copy        *SP_MVCFG,CfdTemp
    jmpc        CfdTemp == #$aa,CfdPart3
    disp        "Device connection problem (8bit write/read $AA)"
    stop
CfdPart3
    copy        #0,*SP_RESET
    delay       #10
    copy        #$5555,*SP_VCTRL
    delay       #10
    copy        *SP_MVCTRL,CfdTemp
    jmpc        CfdTemp == #$5555,CfdPart4
    disp        "Device connection problem (16 bit write/read $5555)"
    stop
CfdPart4
    return
    copy        #$aaaa,*SP_VCTRL
    delay       #10
    copy        *SP_MVCTRL,CfdTemp
    jmpc        CfdTemp == #$aaaa,CfdPart5
    disp        "Device connection problem (16 bit write/read $AAAA)"
    stop
CfdPart5
    copy        #0,*SP_RESET
    delay       #10
    return



;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;   +   Subroutines to wait for specific status bits.
;   +
;   +   Requires:
;   +       Variable 'gStatus' to be declared and updated on interrupt
;   +
;   +   Example:
;   +       jsr     WaitRDY     ; Wait for ready bit to be set.
:   +
;   +   Results:
;   +       Clears the bit waited for in gStatus and then returns
;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
wTemp       word    0


;   +++++++++++++++++++++++++++++++++++++++++++++++++++++++
;   +   Wait for RDY - Ready
;   +++++++++++++++++++++++++++++++++++++++++++++++++++++++
WaitRDY
    copy    gStatus,wTemp
    and     VS_RDY,wTemp
    jmpc    wTemp != VS_RDY,WaitRDY
    xor     #$ffff,wTemp
    and     wTemp,gStatus
    return
	
	
;   +++++++++++++++++++++++++++++++++++++++++++++++++++++++
;   +   Wait for SVC - Service
;   +++++++++++++++++++++++++++++++++++++++++++++++++++++++
WaitSVC
    copy    gStatus,wTemp
    and     VS_SVC,wTemp
    jmpc    wTemp != VS_SVC,WaitSVC ; 
    xor     #$ffff,wTemp
    and     wTemp,gStatus
    return


;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;   +   Interrupt handler
;   +
;   +   Requires:
;   +       Variable 'gStatus' to be declared
;   +
;   +   Example:
;   +       setvect 1,HandleIrqn1
;   +       intson
;   +
;   +   Results:
;   +       Updates the variable 'gStatus'
;   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
HiTemp      word    0
HandleIrqn1
    Device      1
    copy    *$40,HiTemp                 ; Read the status value from device
    or      HiTemp,gStatus              ; Or it into the global value
    Device      deviceno
    rfi




